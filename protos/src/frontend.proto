// Protocol buffers defining the frontend interface.
//
// This file defines the protocol used between the Python frontend and the Rust simulation/audio components.  Because
// it's for us only, e.g. not over the network, it is acceptable to use required fields so we do so for convenience.
//
// Broadly, this defines a "stack" of a fixed set of UI elements with varying levels of dynamicity.  The Rust backend is
// free to modify the stack at any time, with varying levels of patching supported by each control.  When we do support
// patching, we use a React-inspired algorithm: add a key that is unique and identifies an item in an array, and use
// those to diff.  Generally, though, we can't support reordering because this isn't the web; it is highly unlikely that
// swapping elements around in a listbox or whatever is going to play nice with all screen reader operations.
// Fortunately for our use case, this is probably fine: the really complicated thing is inventory, and all the rest can
// just be clever about sorting.  For example, modifying an action menu is fine, as long as the Rust backend makes sure
// to sort the actions the same way every time, e.g. by category.
syntax = "proto2";

package frontend;

// An item in a menu.
message MenuItem {
    // Text which will be displayed to the user.
    required string label = 1;

    // value which will be passed back to the backend.
    required string value = 2;

    required string key = 3;
}

// A menu.  Supports inserting and removing items.
//
// Menus are for things like action lists, "what do you want to do next" selections, and similar.
message Menu {
    required string title = 1;
    repeated MenuItem items = 2;

    required string key = 100;
}

// Represents the main gameplay control.  Has no fields because the frontend handles setting this up.
message GameplayArea {
    required string key = 100;
}

// A UI element.
//
// Exactly one of the following fields is always non-NULL, specifying the element at this level of the stack.
message UiElement {
    optional Menu menu = 1;
    optional GameplayArea gameplay_area = 2;

    required string key = 100;
}

// A stack of UI elements.
//
// When the game launches, the stack immediately populates with at least one element.  It should always remain at least
// one element in length for the duration of the game.  After launch, the bottom element of the stack is usually the
// gameplay area.
//
// The "top" of the stack is the highest index.
message UiStack {
    repeated UiElement elements = 1;
}
